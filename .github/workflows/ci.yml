name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: fitnesspr_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        cd backend
        flake8 app/ --count --max-line-length=88 --show-source --statistics
    
    - name: Format check with black
      run: |
        cd backend
        black --check app/
    
    - name: Import sorting check with isort
      run: |
        cd backend
        isort --check-only app/
    
    - name: Type checking with mypy
      run: |
        cd backend
        mypy app/ --ignore-missing-imports
    
    - name: Test with pytest
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: fitnesspr/package-lock.json
    
    - name: Install dependencies
      run: |
        cd fitnesspr
        npm ci
    
    - name: Lint with ESLint
      run: |
        cd fitnesspr
        npm run lint
    
    - name: Type checking
      run: |
        cd fitnesspr
        npx tsc --noEmit
    
    - name: Build
      run: |
        cd fitnesspr
        npm run build
    
    - name: Run tests (if available)
      run: |
        cd fitnesspr
        # npm test
        echo "Frontend tests would run here"

  security-audit:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Python security audit
      run: |
        cd backend
        pip install pip-audit
        pip-audit -r requirements.txt
    
    - name: Node.js security audit
      run: |
        cd fitnesspr
        npm audit --audit-level=moderate

  docker-build:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      run: |
        cd backend
        docker build -t fitnesspr-backend .
    
    - name: Build frontend image
      run: |
        cd fitnesspr
        docker build -t fitnesspr-frontend .
    
    - name: Test docker-compose
      run: |
        docker-compose config